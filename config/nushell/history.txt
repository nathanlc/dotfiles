ls
$env | reject config | transpose key val | each {|r| echo $"$env.($r.key) = '($r.val)'"}
$env.bob='bob'
$env.BOB='bob'
$env.BOB = 'bob'
$env.BOB='bob'
config env
config nu
$env.PATH
$env.PATH | split 
$env.PATH | split row
char esep
$env.PATH | split row (char esep)
ls
ll
ls -al
ls
ls -a
ls -al
ls
ls -a
ll
^ll
^ls -al
ls 
ls -a | sort-by modified
lt
ls -a | sort-by modified
lt
ls | sort-by name -i
ls | sort-by name
ls | sort-by name -i
help sort-by
help grid
help table
ls
ls | table
ls | table --expanded
ls | table --expand
ls | table --expand-deep
ls | table --flatten
ls | table --collapse
git log
git log --help
ls | explore -i
ps
ps | where name =~ nu
cat ~/.ssh/config | jc --ssh-conf | from json
cat ~/.ssh/config | jc --ssh-conf | from json | explore
let s = (cat ~/.ssh/config | jc --ssh-conf | from json)
s | where host =~ tunnel
$s | where host =~ tunnel
$s | where host =~ tunnel | get 1
cd ~/sandbox/glooko/kings-landing/
git log | jc --git-log | from json
git log | jc --git-log | from json | where author =~ nathan | where date > 4wk
git log | jc --git-log | from json | where author =~ nathan | where date > (date now - 4wk)
help date now
(date now) - 4wk
git log | jc --git-log | from json | where author =~ nathan | where date > ((date now) - 4wk)
git log | jc --git-log | from json | where author =~ nathan | where "date" > ((date now) - 4wk)
git log | jc --git-log | from json | where author =~ nathan | where "date" > "2023-12-15"
git log | jc --git-log | from json | where author =~ Nathan | where "date" > "2023-12-15"
git log | jc --git-log | from json | where author =~ Nathan | where "date" > "2023-12-15" | explore
git log main | jc --git-log | from json | where author =~ Nathan | where "date" > "2023-12-15" | explore
git log main | jc --git-log | from json | where author =~ Nathan | where "date" > "2024-01-01" | explore
git log main | jc --git-log | from json | where author =~ Nathan
brew install zoxide
$nu.env-path
z sandbox/glooko/A06103-analyzer_server/
source ~/.zoxide.nu
z sandbox/glooko/A06103-analyzer_server/
z
vim
z
$env.PATH
nu
__zoxide_z ana
rm ~/.zoxide.nu
cat ~/.zoxide.nu
/opt/homebrew/bin/zoxide ana
/opt/homebrew/bin/zoxide --help
rm ~/.zoxide.nu
cat ~/.zoxide.nu
nu
zoxide init nushell | str replace "def-env" "def --env"
zoxide init nushell | str replace "def-env" "def --env" --all
z ana
z
z ana
z
z -
$env.-
$env
$env | explore
$env | transpose key value | where value =~ "~"
$env.PP = $PWD
$env.PP = $env.PWD
z
$env.PP
echo $env.PP
$env.PP
ls $env.HOME/
ls $env.HOME
ls $env.HOME/sandbox
ls ($env.HOME)/sandbox
ls "($env.HOME)/sandbox"
ls $"$env.HOME/sandbox"
ls $"($env.HOME)/sandbox"
ll
z .aws
ll
cat config
cat ~/.aws/config
jc --help
jc cat ~/.aws/config
cat ~/.aws/config | jc
cat ~/.aws/config | jc  --toml
cat ~/.aws/config | jc  --ini
cat ~/.aws/config | jc  --ini | table
cat ~/.aws/config | jc  --ini | from json
cat ~/.aws/config | jc  --ini | from json | get 0
cat ~/.aws/config | jc  --ini | from json | select keys
cat ~/.aws/config | jc  --ini | from json | keys
cat ~/.aws/config | jc  --ini | from json | transpose key value
cat ~/.aws/config | jc  --ini | from json | transpose keys values | select keys
cat ~/.aws/config | jc  --ini | from json | transpose keys values | select keys | reject default
cat ~/.aws/config | jc  --ini | from json | transpose keys values | select keys | where keys ~= default
cat ~/.aws/config | jc  --ini | from json | transpose keys values | select keys | where keys !~ default
cat ~/.aws/config | jc  --ini | from json | transpose keys values | select keys | where keys != default
cat ~/.aws/config | jc  --ini | from json | transpose keys values | select keys | where keys != default | .keys
let t = (cat ~/.aws/config | jc  --ini | from json | transpose keys values | select keys | where keys != default)
$t.keys
cat ~/.aws/config | jc  --ini | from json | transpose keys values | select keys | where keys != default
$t.keys | each { |it| str replace "profile " "" }
op item list --vault Private
op item list --vault Private | from csv
op item list --vault Private | from csv | where TITLE =~ glooko-qa
op item list --vault Private | from csv | rename id title vault edited
op item list --vault Private | from tsv
op item list --vault Private | from ssv
op item list --vault Private | from ssv | where TITLE =~ "glooko-qa"
op item get 47fy4hkodun6z6ctz2k5n6qnn4 --otp
pwd
cd .config/
ll
cd ~/sandbox/mine/dotfiles/config/nushell/
ll
use aws *
echo $profiles_table
z
cd
cd ~/sandbox/mine/dotfiles/config/nushell/
use aws.nu *
get_credentials glooko-qa
use aws.nu *
get_credentials glooko-qa
aws_credentials glooko-qa
get_credentials glooko-qa
greet boy
aws_credentials glooko-qa
greet boy
env
env.config
$env.config
$config
$env-config
$nu.env-path
$nu
ll `~/Library/Application Support/`
ll `~/Library/Application Support/nushell`
$nu
$nu.default-config-dir
$"($nu.default-config-dir)/aws.nu"
aws_credentials glooko-qa
op item get glooko-qa --otp
$row
$row.ID
$row.ID | str
$row.ID.0
$row | take 1
aws_credentials glooko-qa
aws_credentials bob
$env
$env | transpose key value | where key =~ AWS
$env | transpose key value | where key =~ aws
z
aws_credentials bob
aws sts get-caller-identity
echo -- "arn:aws:iam::056563562803:user/nathan.lecourt@glooko.com" | sed -n 's!.*"arn:aws:iam::.*:user/\(.*\)".*!\1!p'
echo "arn:aws:iam::056563562803:user/nathan.lecourt@glooko.com" | sed -n 's!.*"arn:aws:iam::.*:user/\(.*\)".*!\1!p'
aws sts get-caller-identity | from json
aws sts get-caller-identity | from json | get Arn
aws sts get-caller-identity | from json | get Arn | parse --regex ".*/{username}$"
aws sts get-caller-identity | from json | get Arn | parse --regex '.*/{username}$'
aws sts get-caller-identity | from json | get Arn | parse "{sth}/{username}"
aws iam list-mfa-devices --user-name "nathan.lecourt@glooko.com"
aws_credentials glooko-playground
echo $username
echo $username | ger username
echo $username | get username
echo $username | get username.0
$device
aws_credentials glooko-playground
let otp_id = op item list --vault Private | from ssv | where TITLE =~ "glooko-playground"
$otp_id.0.ID
op item get glooko-playground --otp
let otp_id = op item list --vault Private | from ssv | where TITLE =~ "glooko-playground"
otp_id.0.ID
$otp_id.0.ID
op item get qyljdoc4z7num6dcxiikkjrnli --otp
aws_credentials glooko-playground
profile = 'glooko-playground'
let profile = 'glooko-playground'
let id = 'qyljdoc4z7num6dcxiikkjrnli'
op item get $id --otp
op item get $id --otp | str trim
op item get $id --otp | str length
op item get $id --otp | str trim | str length
aws_credentials glooko-playground
aws_credentials glooko-qa
$device
$device | str length
$device | str trim | str length
aws_credentials glooko-playground
aws sts get-session-token --profile glooko-playground --serial-number arn:aws:iam::056563562803:mfa/nathan.lecourt@glooko.com --token-code 725569
aws sts get-session-token --profile glooko-qa --serial-number arn:aws:iam::056563562803:mfa/nathan.lecourt@glooko.com --token-code 266565
aws_credentials glooko-qa
aws_credentials glooko-playground
$device
aws sts get-session-token --profile glooko-playground --serial-number "arn:aws:iam::056563562803:mfa/nathan.lecourt@glooko.com" --token-code 837506
$device
aws_credentials glooko-playground
let creds = (aws_credentials glooko-playground)
$creds
$creds | get Credentials
aws_credentials glooko-qa
$env.AWS_ACCESS_KEY_ID = 'ASIA3BOD5OCTO76BKJOZ'
$env.AWS_SECRET_ACCESS_KEY = 'QIYHh2xgwPs6OVhnxpWQsn7B/T7hSDaq8uItOeTp'
$env.AWS_SESSION_TOKEN = 'IQoJb3JpZ2luX2VjEOX//////////wEaCXVzLWVhc3QtMSJIMEYCIQD/PGsc0zqSOD/9Y5Qfv5xWxJtaov9QZfRF8m4TOXkgvwIhAKekaDZ0YZu1Dg5u/dEHGzaK3HdPrkuC30i6atOm1WA7KvgBCI7//////////wEQBBoMNzU5MDA5NDcyNjc4IgykVtU38naDEK7aJpkqzAGJl1D0KdzggXK0C0RBUMFQ3Yedt4GbstSy6vrHEemOciKwlDkCZUb2kX43VR7aXEChSW1W0cT7QDEyMn1aK7vgy2y6B/izKiKj7fEa703gsaXA9v7WTL/l4iJ74ekQrxMJyHo8HzwHtyIveyKwVJ28Aw02bzTvZlVvwjpWc773PN5ALY2/9tWOjQn4y2ouIcl/KkgD8qfngyZ35N0a6oHx3Cfc6yDRL+/+gB5OuuKvn2BNYiO6Hs0qogdULCUuIV4bjkX+ZErtTjKfbvMw6MaUrQY6lwH7iD2Kmsy2qWtXhnoWbuhqR9pAIqnrlUyJod/kqILr76y1qFaAQV47G+ghI/mxUP3STXoFYF3vTr4h9leratlF7Q59XkZ6VjS/wJ2cldTy2PBY1Uxdwo3GNB/FiwiyqN6EkgH+sAtcClIgdQpc0V3QJFOMrnnkilzHa15YsNfjCFIs2qxAVxyk5jgmsOrhdBboxzn1YhXh'
let res = (aws ec2 describe-instances --output json)
$res
$res | from json
$res | from json | explore
$res | from json | get Reservations
$res | from json | get Reservations | explore
$res | from json | get Reservations | select Instances
$res | from json | get Reservations | select Instances | explore
$res | from json | get Reservations | select Instances | each { |$it| $it | transpose key value | get value}
$res | from json | get Reservations | select Instances
$res | from json | get Reservations | select Instances | explore
$res | from json | get Reservations | select Instances | get 0
$res | from json | get Reservations | select Instances | get 0.Instances
$res | from json | get Reservations | select Instances | transpose key values | values
$res | from json | get Reservations | select Instances | get 0.Instances
$res | from json | get Reservations | select Instances | get 0.Instances.Tags
$res | from json | get Reservations | select Instances | get 0.Instances.Name
$res | from json | get Reservations | select Instances | get 0.Instances
$res | from json | get Reservations | select Instances | get 0.Instances | explore
$res | from json | get Reservations | select Instances | get 2.Instances.Tags
$res | from json | get Reservations | select Instances | get 0.Instances.Tags
$res | from json | get Reservations | select Instances | table
$res | from json | get Reservations | select Instances | table --expand
$res | from json | get Reservations | select Instances | table --expand-deep
$res | from json | get Reservations | select Instances | table --expand-deep 5
$res | from json | get Reservations | select Instances | table --expand-deep 1
$res | from json | get Reservations | select Instances | table --expand-deep 0
$res | from json | get Reservations | select Instances | table --expand
$res
$res | from json | get Reservations | select Instances | select Tags
$res | from json | get Reservations | select Instances
$res | from json | get Reservations | select Instances | each { |it| it | transpose key value | value.Tags }
$res | from json | get Reservations | select Instances | each { |it| $it | transpose key value | value.Tags }
$res | from json | get Reservations | select Instances | each { |it| $it | transpose key value | value }
$res | from json | get Reservations | select Instances
$res | from json | get Reservations | select Instances.0
$res | from json | get Reservations | select Instances | each { |it| $it | get Tags }
$res | from json | get Reservations | select Instances | each get Tags
$res | from json | get Reservations | select Instances | select Tags
$res | from json | get Reservations | select Instances | each {|it| $it | select Tags }
$res | from json | get Reservations | select Instances
$res | from json | get Reservations | select Instances.0
$res | from json | get Reservations | select Instances.0.Tags
$res | from json | get Reservations | select Instances
$res | from json | get Reservations.Instances
$res | from json | get Reservations.Instances | select [Tags, KeyName]
$res | from json | get Reservations.Instances | select Tags KeyNae
$res | from json | get Reservations.Instances | select Tags
$res | from json | get Reservations.Instances
$res | from json | get Reservations.Instances | select KeyName
$res | from json | get Reservations.Instances | select KeyName Tags
$res | from json | get Reservations.Instances | select Tags KeyName
$res | from json | get Reservations.Instances | select KeyName Tags
$res | from json | get Reservations.Instances | select Tags PrivateIpAddress
$res | from json | get Reservations.Instances | select Tags PrivateIpAddress | get 0
$ret
$res
let r
let rlet res = (aws ec2 describe-instances --output json)
let res = (aws ec2 describe-instances --output json)
$res
let res = (aws ec2 describe-instances --region us-east-1 --output json)
$res
aws_credentials glooko-qa
$env.AWS_ACCESS_KEY_ID = 'ASIA3BOD5OCTEIEXIPO5'
$env.AWS_SECRET_ACCESS_KEY = 'n2BHzLiL5Z8QQ3xtfgn5QZLDt19ftblV28BI/qbI'
$env.AWS_SESSION_TOKEN = 'IQoJb3JpZ2luX2VjEOb//////////wEaCXVzLWVhc3QtMSJHMEUCIQDZGhaCyjMlHoz6WRfjZactaanEhepPoVsAhKCPrAAfWwIgG5l68pmxqRmHKTa6Y9x+zvMW43Mrfl5uXI3u+3vfL9Mq+AEIj///////////ARAEGgw3NTkwMDk0NzI2NzgiDMZWKEVRZLaLKfofGirMAUwejFQ8MB2i2owmHuOHBK/8MwomdRStdpi9pVh1SkkhNT37+EYhmlZOy6AITwvxYELjbR0bbEHEnzq6PXGvSWeqMV+XaCXu6R+PDAZL70WY75QmR2tpI1h7KfiQMiLnP8ktYyyWOL7A2dKTw6f/KBD2jIpXUC2I0nPiGTv2T780TEBoojuPIuM2MRooceAyFBfJwADXWO4LczWWs6XkHE4uHZPy3nNW393dvKhjCUZMjNqX5yroh9KMZvVEGmo+jvzShXGSTLhVJCLdAzDL8JStBjqYAZ32565FRwiZ1M/GWRKi/H0ApyBnAkum/x4zsqEjNb54IQPC/I1kcgoVNYBJsKpo4OIEIMw5Wd2lRw+MQULkI0ETYF+KvHOBvwm7Jjbalco6WcGb9K0jUl9Hh7i6W2Q3Yqh2r/UYDwxfkMYY+430zxs+Z0QRaGrCKDvekeJOi1yQs2/eO6SVWXv5hEKERKreVqNf3/a5TdYO'
let res = (aws ec2 describe-instances --output json)
res
$res
let res = (aws ec2 describe-instances --region us-east-1 --output json)
$res
aws_instances yo us-east-1
aws_instances yo
aws_instances yo us-east-1
aws_instances yo
aws_instances yo us-east-1
aws_instances yo
aws_instances yo us-east-1
aws_credentials glooko-qa
$env.YOYO
$env
$env | reject config
aws_credentials glooko-qa
$env | reject config
aws_credentials glooko-qa
$env | reject config
aws_credentials glooko-qa
aws_instances glooko-qa us-east-1
aws ec2 describe-instances --profile glooko-qa us-east-1 --output json | from json | get Reservations.Instances
aws ec2 describe-instances --profile glooko-qa us-east-1 --output json
aws ec2 describe-instances --profile glooko-qa --region us-east-1 --output json
aws_credentials glooko-qa
$env | reject config
aws ec2 describe-instances --profile glooko-qa --region us-east-1 --output json
AWS_ACCESS_KEY_ID=$env.AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$env.AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN=$env.AWS_SESSION_TOKEN aws ec2 describe-instances --profile glooko-qa --region us-east-1 --output json
$env.AWS_ACCESS_KEY_ID
AWS_ACCESS_KEY_ID=$env.AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$env.AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN=$env.AWS_SESSION_TOKEN aws ec2 describe-instances --profile glooko-qa --output json
aws ec2 describe-instances --profile glooko-qa --region us-east-1 --output json
let res = (aws ec2 describe-instances --output json)
$res
let res = (aws ec2 describe-instances --profile glooko-qa --output json)
let res = (aws ec2 describe-instances --profile default --output json)
$res
$en | reject config
$env | reject config
aws_instances glooko-qa us-east-1
let res = (aws ec2 describe-instances --profile glooko-qa --output json)
$env
$env | reject config
let res = (aws ec2 describe-instances --output json)
$res
let res = (aws ec2 describe-instances --profile glooko-qa --output json)
let res = (aws ec2 describe-instances --profile glooko-playground --output json)
aws_credentials glooko-playground
env | grep -i aws
let res = (aws ec2 describe-instances --profile glooko-playground --output json)
AWS_ACCESS_KEY_ID=ASIARL2IJ65SWVOUKBPK AWS_SECRET_ACCESS_KEY=0gwXtOUJUntzbnI7hFZL1iGSie1g9v/nv3A31Bek AWS_SESSION_TOKEN=IQoJb3JpZ2luX2VjEO3//////////wEaCXVzLWVhc3QtMSJHMEUCIQDAyBuqHPSFWhvMdoyOaG+P3uR21PkwIgpAiS2sQsF7JQIgWBzPrrl51+Y63VK1EW+3B3XwOU/RV22j81UrvyY0w84q+AEIlf//////////ARAEGgwwOTQxMDQwNTc3MDEiDLr8jjq+Ek47LdJ2XSrMAVa1OlGYDXOpkVeRiTe6ejJQin1/eC5xb1rCIOZkWRPCfT67SNkGH2tTKbm6yXMrL09lepz0yj9X6G7WpW+ZQTN5UMqORMp42D+eJ+FtOSmczAlrLipmI4QDR3IOH4MRYptiqqmY3ZdlqeoOuaMxf6hhC9MHCeV2RePagNMcx0ImKDCKnUqm8QnO6Mp5GHTEpwbDstfJbMFApM2wzffyTXfxWplllRf3mhfxm/64hHZFNjXc6TgvujucZSPtG9FGJXfFg+QLhQF+x10LFDC6opatBjqYAeKjTUbxh1Q9smMAIG+YfH7ucuB49qHzm2YPqDGdFDE5ks92he2FSt92zZEpwQ9Vxi+2QEowDt8m6fW3dRj5QwDn/YxJfkIDycHHWDFb5GpfHELU5QDNoSWLXbI+ug4wwgplxPJE9X++0JEBnPESCnc9ZNFhDPAUn9mWmUbXJM+e2/GlegcwlYOFPFLhjKGFeeinMg2Bdb6c aws ec2 describe-instances --profile glooko-playground --output json
cat ~/.aws/credentials
env | grep -i aws
let res = (aws ec2 describe-instances --profile glooko-qa --output json)
aws_credentials glooko-qa
let res = (aws ec2 describe-instances --profile glooko-qa --output json)
aws ec2 describe-instances --profile glooko-qa
aws_credentials glooko-qa
aws ec2 describe-instances --profile glooko-qa
aws ec2 describe-instances --profile default
aws ec2 describe-instances --profile default --region us-east-1
aws ec2 describe-instances --profile glooko-qa --region us-east-1 --output json
env | grep -i aws
aws ec2 describe-instances --region us-east-1 --output json | grep cluster
aws ec2 describe-instances --output json | grep cluster
aws ec2 describe-instances --output json --profile glooko-playground
aws_credentials glooko-playground
aws ec2 describe-instances --output json --profile glooko-playground
aws ec2 describe-instances --output json
aws_credentials glooko-qa
aws ec2 describe-instances --output json | grep cluster
aws ec2 describe-instances --output json --resion us-east-1 | grep cluster
aws ec2 describe-instances --output json --region us-east-1 | grep cluster
aws_credentials glooko-qa
aws_instances us-east-1
aws ec2 describe-instances --output json --region us-east-1 | grep cluster
$env | grep -i aws
aws_instances us-east-1
aws_credentials glooko-qa
aws_instances us-east-1
#aws ec2 describe-instances $region_param --output json
let region_param = ""
aws ec2 describe-instances $region_param --output json
#aws ec2 describe-instances $region_param --output json
let region_param = " --region us-east-1"
aws ec2 describe-instances $region_param --output json
aws ec2 describe-instances ($region_param) --output json
let region_param = "--region us-east-1"
aws ec2 describe-instances ($region_param) --output json
aws ec2 describe-instances $region_param --output json
aws ec2 describe-instances --region --output json
#aws ec2 describe-instances --region --output json
let reg = "us-east-1"
aws ec2 describe-instances --region $reg --output json
aws_credentials glooko-qa
aws_instances us-east-1
aws_credentials glooko-qa
aws_instances us-east-1
let region = 'us-east-1'
echo $command
$command
let instances = ($command | from json)
$instances
aws_credentials glooko-qa
aws_instances us-east-1
aws_credentials glooko-qa
aws_instances us-east-1
aws_instances
aws_instances | explore
aws_credentials glooko-qa
aws_instances us-east-1
let data = aws_instances us-east-1
$data | get -i PrivateIpAddress Tags
$data | select -i PrivateIpAddress Tags
aws_credentials glooko-qa
aws_instances us-east-1
let data = aws_instances us-east-1
$data.0
$data.0.Tags
$data.0.Tags.Key
$data.0.Tags.0.Key
$data.0.Tags.0.Value
$data.0.Tags.0
$data.0.Tags
$data.1.Tags
$data.1.Tags.0
$data.1.Tags.0 | where Key = Name
$data.1.Tags.0 | where Key == Name
aws_credentials glooko-qa
aws_instances us-east-1
aws_credentials glooko-qa
let data = aws_instances us-east-1
$data | { each |it| let name = (match $it.Tags {null => (Key: null, Value: null), _ => $it.Tags}) name}
aws_credentials glooko-qa
let data = aws_instances us-east-1
$data
let data = aws_instances
$data
$data | get 0.name
aws_credentials glooko-qa
let data = aws_instances us-east-1
$data
let data = aws_instances
($data | each { |it|<\n>let name = $it.Tags<\n>{name: $name, ip: $it.PrivateIpAddress}<\n>})
($data | each { |it|<\n>let name = $it.Tags.0<\n>{name: $name, ip: $it.PrivateIpAddress}<\n>})
let data = aws_instances
$data
aws_credentials glooko-qa
let data = aws_instances us-east-1
$data
let data = aws_instances
$data
aws_credentials glooko-qa
let data = aws_instances us-east-1
$data
aws_credentials glooko-qa
let data = aws_instances us-east-1
$data
aws_credentials glooko-qa
let data = aws_instances us-east-1
$data | each { |it|<\n>let tags = match $it.Tags {<\n>null => [{Key: Value, Value: "no name"}],<\n>_ => $it.Tags.0<\n>}<\n>{tags: $tags}<\n>}
let data = aws_instances
$data
let data = aws_instances
$data
let data = aws_instances
$data
[] 
[] | take 1
[] | get 0
[] | first
$data
let data = aws_instances
$data
aws_credentials glooko-qa
let data = aws_instances
$data
let data = aws_instances us-east-1
$data
let data = aws_instances
$data
let data = aws_instances
$data
aws_credentials glooko-qa
let data = aws_instances us-east-1
$data
nu
let data = aws_instances
$dat
$data
aws_credentials glooko-qa
let data = aws_instances us-east-1
$data
let data = aws_instances
$data
aws_credentials glooko-qa
let data = aws_instances us-east-1
$data
let data = aws_instances
$data
let data = aws_instances
$data
let data = aws_instances
$data
aws_credentials glooko-qa
let data = aws_instances us-east-1
$data
let data = aws_instances
$data
aws_credentials glooko-qa
let data = aws_instances
$data
let data = aws_instances us-east-1
$data
let data = aws_instances
$data
aws_credentials glooko-qa
let data = aws_instances
$data
let data = aws_instances us-east-1
$data
let s = (cat ~/.ssh/config | jc --ssh-conf)
s
$s
$s | jq 
ssh_config
ssh-config
ssh-config | describe
ssh-config | get 0 | describe
print_ssh_config ssh_config
ssh_config
ssh_config | describe
print_ssh_config ssh_config
ssh_config
ssh_config | describe
print_ssh_config (ssh_config)
print_ssh_config ssh_config
ssh_config
ssh_config | print_ssh_config
print_ssh_config ssh_config
ssh_config 
def ssh_config_category_string [cat: record] {<\n>  let pad = "  "<\n>  let build_line = { |key, value|<\n>    key + " " + value<\n>  }<\n>  (<\n>    cat |<\n>    transpose key value |<\n>    each { |it|<\n>      match [key value] {<\n>        ["host", $v] => (build_line "host" $v),<\n>        ["host_list", _] => null,<\n>        [_, null] => null,<\n>        [$k, $v] => (match ($v | describe | str replace "<.*" "") {<\n>          "string" => (build_line $"  ($k)" $v),<\n>          "list" => (build_line $"  ($k)" ($v | str join " ")),<\n>        })<\n>      }<\n>    } |<\n>    compact<\n>  )<\n>}
print_ssh_config (ssh_config)
ll
ls
ls | where name =~ Drop
print_ssh_config (ssh_config)
cd .ssh/
lll
ll
mv config config.bkp
print_ssh_config (ssh_config) | save -f ~/.ssh/config
z ss
z ssh
parse_ssh_config (ssh_config) | save -f ~/.ssh/config
cp config.bkp config
parse_ssh_config (ssh_config) | save -f ~/.ssh/config
cat config
2 | describe
2 | to str
2 | into str
2 | into string
parse_ssh_config (ssh_config) | save -f ~/.ssh/config
["dog"] | str join " "
parse_ssh_config (ssh_config) | save -f ~/.ssh/config
ssh_config 
ssh_config | get 0 
ssh_config | get 1 
parse_ssh_config (ssh_config)
ssh_config
ssh_config | get 1 
ssh_config | get 1.identityfile
ssh_config | get 1.identityfile | describe
ssh_config | get 1.identityfile | describe | str replace "<.*" ""
ssh_config | get 1.identityfile | describe | str replace "<.*" "" -a
ssh_config | get 1.identityfile | describe | str replace "<.*$" ""
ssh_config | get 1.identityfile | describe | str replace "\<.*$" ""
parse_ssh_config (ssh_config)
parse_ssh_config (ssh_config) | save -f ~/.ssh/config
let o = (ssh_config)
o
$o
parse_ssh_config (ssh_config)
cat ~/.ssh/config | jc --ssh-conf | from json
cat ~/.ssh/config | jc --ssh-conf 
cat ~/.ssh/config.bkp| jc --ssh-conf 
cat ~/.ssh/config | jc --ssh-conf 
ssh -G
ssh -G -
man ssh
ssh -G qa-us-ecs-cluster-web
parse_ssh_config (ssh_config) | save -f ~/.ssh/config
ssh_config
parse_ssh_config (ssh_config) | save -f ~/.ssh/config
parse_ssh_config (ssh_config)
ssh_config
parse_ssh_config (ssh_config) | save -f ~/.ssh/config
ssh_config
update_hostname_ip (ssh_config) qa-us-ecs-cluster-web bob
ssh_config
ssh_config | update hostname { |x| x.hostname }
ssh_config | update "hostname" { |x| x.hostname }
ssh_config | update "host" { |x| x.hostname }
ssh_config | update "host" { |x| x.host }
ssh_config | update "host" { |x| $x.hostname }
ssh_config | update "host" { |x| $x.host }
ssh_config | update "hostname" { |x| $x.hostname }
ssh_config
ssh_config | update hostname {|row| bob}
ssh_config | update host_list {|row| bob}
ssh_config | update host_list {|row| "bob"}
ssh_config | upsert hostname {|row| "bob"}
ssh_update_conf (ssh_config) qa-us-ecs-cluster-web bob
cat CHANGELOG.md | from md
ssh_config
host_to_profile_region qa-us-ecs-cluster-web
host_to_profile_region qa
host_to_profile_region qa-
host_to_profile_region qa-us
host_to_profile_region qa-us-
host_to_profile_region qa-us-w
host_to_profile_region qa-us-w | get 0
host_to_profile_region qa-us-w
host_to_profile_region qa-eu-w
host_to_profile_region prod-eu-ec
let res = (ssh qa-us-ecs-cluster-web)
let res = (^ssh qa-us-ecs-cluster-web)
$res
ssh qa-us-ecs-cluster-web
let res = ssh qa-us-ecs-cluster-web
$res
do { ssh qa-us-ecs-cluster-web }
$env.LAST_EXIT_CODE
do { ssh qa-us-ecs-cluster-web }
$env.LAST_EXIT_CODE
do { ssh qa-us-ecs-cluster-web }
$env.LAST_EXIT_CODE
ssh qa-us-ecs-cluster-web
^ssh qa-us-ecs-cluster-web
sshx qa-us-ecs-cluster-web
$env
$env | re,e
$env | reject config
sshx qa-us-ecs-cluster-web
let res = (sshx qa-us-ecs-cluster-web)
$res
$res | where Name == "qa-us-ecs-cluster-web"
$res | where Name == "qa-us-ecs-cluster-web" | get 0?
$res | where Name == "qa-us-ecs-cluster-web" | get 0?PrivateIpAddress?
$res | where Name == "qa-us-ecs-cluster-web" | get 0?.PrivateIpAddress?
sshx qa-us-ecs-cluster-web
(ssh_config)
parse_ssh_config (ssh_config) 
sshx qa-us-ecs-cluster-web
ssh qa-us-ecs-cluster-web
ps | where name =~ ssh
ps --help
ps -l | where name =~ ssh
kill 3534
do { ssh qa-us-ecs-cluster-web } | complete
ssh qa-us-ecs-cluster-web
ssh -G qa-us-ecs-cluster-web
/Applications/OpenVPN Connect/OpenVPN Connect.app/contents/MacOS/OpenVPN Connect --help
`/Applications/OpenVPN Connect.app/Contents/MacOS/OpenVPN Connect` --help
`/Applications/OpenVPN Connect.app/Contents/MacOS/OpenVPN Connect` --list-profiles
`/Applications/OpenVPN Connect.app/Contents/MacOS/OpenVPN Connect`
ls app/models/**/*.rb
z do
lt
gunzip LOG_DT_2024-01-18_03-04-57_ID_d42cc548-6f38-4cca-a6a5-d067b6ca673c_GC-mauv-transport-6924_XF-OmnipodC2C.log.gz
z azr
z ~/sandbox/glooko/*analy*
cd ~/sandbox/glooko/*analy*                                                                                                                      01/18/24 14:58:30 
cd ~/sandbox/glooko/*analy
cd ~/sandbox/glooko/*analy*
cd ~/sandbox/glooko/A06103-analyzer_server/
cd test/testdata/OmnipodCloud/
mv ~/Downloads/LOG_DT_2024-01-18_03-04-57_ID_d42cc548-6f38-4cca-a6a5-d067b6ca673c_GC-mauv-transport-6924_XF-OmnipodC2C.log load_test_XF-OmnipodC2C.json
z azr
cd sandbox/glooko/A06103-analyzer_server/
z
z azr
z analy
cd test/testdata/OmnipodCloud/
nvim --clean load_test_XF-OmnipodC2C.json
http get cht.sh/ruby/iterate+hash
http get https://cht.sh/ruby/iterate+hash
curl https://cht.sh/ruby/iterate+hash
curl cht.sh/ruby/iterate+hash
curl cht.sh/ruby
curl cht.sh/ruby/hash
curl cht.sh/ruby/hash+iterate
curl cht.sh/ruby/iterate+over+hash
curl cht.sh/ruby/:help
curl cht.sh/ruby/iterate over hash
curl "cht.sh/ruby/iterate+over+hash"
$env.PATH
curl -s https://cht.sh/:cht.sh | sudo tee /usr/local/bin/cht.sh && sudo chmod +x /usr/local/bin/cht.sh
spec
spec/
..
./spec
..
./app/
..
mutagen-compose exec -e RAILS_ENV=test -e DISABLE_SPRING=1 mutagen-web bundle exec rspec ./spec/models/o_auth/ ./spec/services/o_auth/ ./spec/controllers/o_auth/
ls | sort-by type name -i | grid -c | str trim
ll
ls | sort-by type name -i | grid -c | str trim
ls | sort-by type name -i
ls | sort-by type name -i | help grid
help grid
ls | sort-by type name -i | help grid
ls | sort-by type name -i | grid -c
ls | sort-by type name -i | grid -c | str trim
ls | sort-by type name -i | grid
ls | sort-by type name -i | grid -c
$env.NVIM
$env
$env |,e
$env | reject config
alias v = nvr
v -cc split bob.txt
v bab.txt
v -cc split bob.txt
v -cc split bab.txt bob.txt
nvr -o bob.txt -O bab.txt
nvr -o bob.txt bab.txt
z dow
lt
rm LOG_DT_2024-01-05_10-11-12_ID_ac0cb6e0-95d0-4d50-90e9-aafa7f130d4a_GC-violet-claremont-1105_XF-OmnipodC2C.log
gunzip LOG_DT_2024-01-19_01-43-06_ID_50a11f67-62a1-44e5-875a-63a68072453f_GC-maroon-hoard-8437_XF-OmnipodC2C.log.gz
z ana
mv ~/Downloads/LOG_DT_2024-01-19_01-43-06_ID_50a11f67-62a1-44e5-875a-63a68072453f_GC-maroon-hoard-8437_XF-OmnipodC2C.log test/testdata/OmnipodCloud/load_test_XF-OmnipodC2C.json
mv -f ~/Downloads/LOG_DT_2024-01-19_01-43-06_ID_50a11f67-62a1-44e5-875a-63a68072453f_GC-maroon-hoard-8437_XF-OmnipodC2C.log test/testdata/OmnipodCloud/load_test_XF-OmnipodC2C.json
docker compose exec analyzer python PumpOmnipodCloud.py test/testdata/OmnipodCloud/load_test_XF-OmnipodC2C.json
cd dow
z dow
ll
lt
gunzip LOG_DT_2024-01-19_01-43-06_ID_8be65e60-c61a-48e3-95df-74d6edad0ca5_GC-violet-pleasure-8966_XF-OmnipodC2C.log.gz
mv -f LOG_DT_2024-01-19_01-43-06_ID_8be65e60-c61a-48e3-95df-74d6edad0ca5_GC-violet-pleasure-8966_XF-OmnipodC2C.log ~/sandbox/glooko/A06103-analyzer_server/test/testdata/OmnipodCloud/load_test_XF-OmnipodC2C.json
z ana
docker compose exec analyzer python PumpOmnipodCloud.py test/testdata/OmnipodCloud/load_test_XF-OmnipodC2C.json
