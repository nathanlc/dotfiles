#!/usr/bin/env bash

set -e

# JS field injection code from https://github.com/qutebrowser/qutebrowser/blob/master/misc/userscripts/password_fill
javascript_escape() {
    # print the first argument in an escaped way, such that it can safely
    # be used within javascripts double quotes
    # shellcheck disable=SC2001
    sed "s,[\\\\'\"],\\\\&,g" <<< "$1"
}

js() {
cat <<EOF
    function isVisible(elem) {
        var style = elem.ownerDocument.defaultView.getComputedStyle(elem, null);
        if (style.getPropertyValue("visibility") !== "visible" ||
            style.getPropertyValue("display") === "none" ||
            style.getPropertyValue("opacity") === "0") {
            return false;
        }
        return elem.offsetWidth > 0 && elem.offsetHeight > 0;
    };
    function hasPasswordField(form) {
        var inputs = form.getElementsByTagName("input");
        for (var j = 0; j < inputs.length; j++) {
            var input = inputs[j];
            if (input.type == "password") {
                return true;
            }
        }
        return false;
    };
    function loadData2Form (form) {
        var inputs = form.getElementsByTagName("input");
        for (var j = 0; j < inputs.length; j++) {
            var input = inputs[j];
            if (isVisible(input) && (input.type == "text" || input.type == "email")) {
                input.focus();
                input.value = "$(javascript_escape "${USERNAME}")";
                input.dispatchEvent(new Event('change'));
                input.blur();
            }
            if (input.type == "password") {
                input.focus();
                input.value = "$(javascript_escape "${PASSWORD}")";
                input.dispatchEvent(new Event('change'));
                input.blur();
            }
        }
    };
    var forms = document.getElementsByTagName("form");
    for (i = 0; i < forms.length; i++) {
        if (hasPasswordField(forms[i])) {
            loadData2Form(forms[i]);
        }
    }
EOF
}

URL=$(echo "$QUTE_URL" | awk -F/ '{print $3}' | sed 's/www.//g')
echo "message-info 'Looking for password for $URL...'" >> $QUTE_FIFO

is_op_running=$(ps aux | grep "1Password" | grep "1Password.app")
if [ -z "$is_op_running" ]; then
  echo "message-error '1Password is not running. Please start it and try again.'" >> $QUTE_FIFO
  exit 1
fi

results=()
while IFS= read -r line; do
    results+=("$line")
done < <(/opt/homebrew/bin/op item list --format json | /opt/homebrew/bin/jq -r '.[] | select(has("urls")) | {id, title} + (.urls[]) | "\(.id):\(.title):\(.href)"' | grep "$URL")

if [ ${#results[@]} -eq 0 ]; then
  echo "message-error 'No entry found for $URL'" >> $QUTE_FIFO
  exit 1
fi

result=""
if [ $URL == "github.com" ]; then
    for item in "${results[@]}"; do
        if [[ "$item" == *nathanlc* ]]; then
            result="$item"
            break
        fi
    done
elif [ ${#results[@]} -eq 1 ]; then
    result="${results[0]}"
else
    # Prepare the list of results for the osascript dialog
    result_list=$(printf '"%s", ' "${results[@]}")
    result_list=${result_list%, }  # Remove trailing comma

    result=$(osascript <<EOF
tell application "System Events"
    activate
end tell

set optionsList to {${result_list}}
set selectedOption to choose from list optionsList with prompt "Select entry:" default items {"${results[0]}"}
if selectedOption is false then
    return "CANCELLED"
else
    return selectedOption as string
end if
EOF
)
fi

echo "message-info 'Selected: $result'" >> "$QUTE_FIFO"

IFS=: read -r UUID var1 var2 <<< "$result"
ITEM=$(/opt/homebrew/bin/op item get --format json "$UUID")

PASSWORD=$(echo "$ITEM" | /opt/homebrew/bin/jq -r '.fields | .[] | select(.id=="password") | .value')

if [ -n "$PASSWORD" ]; then
  TITLE=$(echo "$ITEM" | /opt/homebrew/bin/jq -r '.title')
  USERNAME=$(echo "$ITEM" | /opt/homebrew/bin/jq -r '.fields | .[] | select(.id=="username") | .value')

  printjs() {
      js | sed 's,//.*$,,' | tr '\n' ' '
  }
  echo "jseval -q $(printjs)" >> "$QUTE_FIFO"

  TOTP=$(echo "$ITEM" | /opt/homebrew/bin/op item get --otp "$UUID" || echo "")
  if [ -n "$TOTP" ]; then
    echo "$TOTP" | pbcopy
    echo "message-info 'One time password for $TITLE: $TOTP in clipboard'" >> "$QUTE_FIFO"
  fi
else
  echo "message-warning 'No password found for $URL'" >> "$QUTE_FIFO"
fi

echo "message-info 'DONE'" >> "$QUTE_FIFO"
