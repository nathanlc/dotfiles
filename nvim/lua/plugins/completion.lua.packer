local cmp = require('cmp')
local lspkind = require('lspkind')
lspkind.init()

cmp.setup({
  snippet = {
    expand = function(args)
      require('luasnip').lsp_expand(args.body)
    end,
  },
  mapping = cmp.mapping.preset.insert({
    ['<C-u>'] = cmp.mapping.scroll_docs(-4),
    ['<C-d>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-g>'] = cmp.mapping.abort(),
    ['<C-n>'] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Insert }),
    ['<C-p>'] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Insert }),
    ['<C-y>'] = cmp.mapping(
      cmp.mapping.confirm {
        behavior = cmp.ConfirmBehavior.Insert,
        select = true,
      },
      { "i", "c" }
    ),
  }),
  sources = {
    { name = 'nvim_lsp' },
    { name = 'nvim_lua' },
    { name = 'luasnip' },
    { name = 'buffer' },
  },
})

local ls = require("luasnip")
ls.config.set_config({
  history = false,
  updateevents = "TextChanged,TextChangedI",
})

-- for _, ft_path in ipairs(vim.api.nvim_get_runtime_file("lua/custom/snippets/*.lua", true)) do
--   loadfile(ft_path)()
-- end

vim.keymap.set({ "i", "s" }, "<C-j>", function()
  if ls.expand_or_jumpable() then
    ls.expand_or_jump()
  end
end, { silent = true })

vim.keymap.set({ "i", "s" }, "<C-k>", function()
  if ls.jumpable(-1) then
    ls.jump(-1)
  end
end, { silent = true })

-- -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
-- local function delay(fn, time)
--     local timer = vim.loop.new_timer()
--     timer:start(time, 0, vim.schedule_wrap(function()
--         fn()
--         timer:stop()
--     end))
-- end
--
-- local cmd_mapping = cmp.mapping.preset.cmdline()
-- local cmd_mapping_overwrite = {
--       ['<Tab>'] = {
--         c = function()
--             if vim.api.nvim_get_mode().mode == "c" and cmp.get_selected_entry() == nil then
--                 local text = vim.fn.getcmdline()
--                 local expanded = vim.fn.expandcmd(text)
--                 if expanded ~= text then
--                     vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes("<C-U>", true, true, true) .. expanded, "n", false)
--                     -- triggering right away won't work, need to wait a cycle
--                     delay(cmp.complete, 0)
--                 elseif cmp.visible() then
--                     cmp.select_next_item()
--                 else
--                     cmp.complete()
--                 end
--             else
--                 if cmp.visible() then
--                     cmp.select_next_item()
--                 else
--                     cmp.complete()
--                 end
--             end -- in the real mapping there are other elseif clauses
--         end,
--     }
-- }

-- for k, v in pairs(cmd_mapping_overwrite) do
--     cmd_mapping[k] = v
-- end

cmp.setup.cmdline({ '/', '?' }, {
  mapping = cmp.mapping.preset.cmdline(),
  sources = {
    { name = 'buffer' }
  }
})

cmp.setup.cmdline(':', {
  mapping = cmp.mapping.preset.cmdline(),
  sources = cmp.config.sources({
    {
      name = 'path',
      option = {
        trailing_slash = true
      }
    },
    { name = 'cmdline_history' },
  }, {
    { name = 'cmdline' }
  })
})

-- cmp.setup.cmdline(':', {
--   mapping = cmp.mapping.preset.cmdline(),
--   sources = cmp.config.source({
--     { name = 'path' }
--   }, {
--     { name = 'cmdline' }
--   }),
--   matching = { disallow_symbol_nonprefix_matching = false }
-- })
